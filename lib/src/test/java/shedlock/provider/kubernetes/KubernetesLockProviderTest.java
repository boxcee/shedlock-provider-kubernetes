/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package shedlock.provider.kubernetes;

import io.fabric8.kubernetes.client.NamespacedKubernetesClient;
import io.fabric8.kubernetes.client.server.mock.EnableKubernetesMockClient;
import io.fabric8.kubernetes.client.server.mock.KubernetesMockServer;
import net.javacrumbs.shedlock.core.LockConfiguration;
import net.javacrumbs.shedlock.core.SimpleLock;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.Duration;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.Optional;
import java.util.UUID;

@EnableKubernetesMockClient(crud = true)
class KubernetesLockProviderTest {

  private KubernetesLockProvider lockProvider;
  private KubernetesMockServer server;

  @BeforeEach
  void beforeEach() {
    final NamespacedKubernetesClient client = server.createClient();
    lockProvider = new KubernetesLockProvider(client, "hostname");
  }

  @Test
  void simpleLock() {
    /*
     * Given
     */
    String lockName = UUID.randomUUID().toString();
    LockConfiguration lockConfiguration = getLockConfiguration(lockName, 0L, 0L);

    /*
     * When
     */
    final Optional<SimpleLock> lock = lockProvider.lock(lockConfiguration);

    /*
     * Then
     */
    Assertions.assertTrue(lock.isPresent());
  }

  @Test
  void simpleLock_lockAfterUnlock() {
    /*
     * Given
     */
    String lockName = UUID.randomUUID().toString();
    LockConfiguration lockConfiguration = getLockConfiguration(lockName, 60L, 0L);
    Optional<SimpleLock> simpleLockOptional = lockProvider.lock(lockConfiguration);
    SimpleLock simpleLock = simpleLockOptional.orElseThrow();

    /*
     * When
     */
    Optional<SimpleLock> lock = lockProvider.lock(lockConfiguration);
    Assertions.assertTrue(lock.isEmpty());
    simpleLock.unlock();
    lock = lockProvider.lock(lockConfiguration);

    /*
     * Then
     */
    Assertions.assertTrue(lock.isPresent());
  }

  @Test
  void simpleLock_lockBeforeAtLeastForIsExpired() {
    /*
     * Given
     */
    String lockName = UUID.randomUUID().toString();
    LockConfiguration lockConfiguration = getLockConfiguration(lockName, 60L, 30L);
    Optional<SimpleLock> simpleLockOptional = lockProvider.lock(lockConfiguration);
    Assertions.assertTrue(simpleLockOptional.isPresent());

    /*
     * When
     */
    Optional<SimpleLock> lock = lockProvider.lock(lockConfiguration);

    /*
     * Then
     */
    Assertions.assertTrue(lock.isEmpty());
  }

  private LockConfiguration getLockConfiguration(String name, Long lockAtMostFor, Long lockAtLeastFor) {
    return new LockConfiguration(LocalDateTime.now().toInstant(ZoneOffset.UTC), name, Duration.ofSeconds(lockAtMostFor), Duration.ofSeconds(lockAtLeastFor));
  }
}
